#+TITLE: SICP Exercises (Work in progress)
#+OPTIONS: toc:1 tex:t
* Chapter 1
** Exercise 1.3
#+BEGIN_SRC scheme
(define (square x)
(* x x))
(define (sum-of-squares-of-largest a b c)
  (- (+ (square a) (square b) (square c))
     (cond ((and (< a b) (< a c)) a)
           ((< b c) b)
           (else c))))
#+END_SRC
A recursive procedure is simply one that calls itself by name. It is
not necessarily a recursive process.

“Programs must be written for people to read, and only incidentally
for computers to execute”
** Exercise 1.6
Enters a recursive loop not because a cond structure is used instead
of an if structure but because a function is called instead of using
an if (or cond) structure. If new-if were implemented with if instead
of cond, the code would also enter an infinite loop.

“The set of expressions for which a binding defines a name is called
the scope of that name”
** Exercise 1.9
First (recursive)

(+ 4 5)

(inc (+ (dec 4) 5))

(inc (+ 3 5))

(inc (inc (+ (dec 3) 5)))

(inc (inc (+ 2 5)))

(inc (inc (inc (+ (dec 2) 5))))

(inc (inc (inc (+ 1 5))))

(inc (inc (inc (inc (+ (dec 1) 5)))))

(inc (inc (inc (inc (+ 0 5)))))

(inc (inc (inc (inc 5))))

(inc (inc (inc 6)))

(inc (inc 7))

(inc 8)

9

Second (iterative)

(+ 4 5)

(+ (dec 4) (inc 5))

(+ 3 6)

(+ (dec 3) (inc 6))

(+ 2 7)

(+ (dec 2) (inc 7))

(+ 1 8)

(+ (dec 1) (inc 8))

(+ 0 9)

9

#+BEGIN_SRC scheme
(define (my-count-change amt values)
  (cond ((null? values) 0)
        ((< amt 0) 0)
        ((= amt 0) 1)
        (else (+ (my-count-change (- amt (car values)) values)
                 (my-count-change amt (cdr values))))))

(define (count-change amt)
  (define (cc amount kinds-of-coins)
    (cond ((= amount 0) 1)
          ((or (< amount 0) (= kinds-of-coins 0)) 0)
          (else (+ (cc amount
                       (- kinds-of-coins 1))
                   (cc (- amount
                          (first-denomination kinds-of-coins))
                       kinds-of-coins)))))
  (define (first-denomination kinds-of-coins)
    (cond ((= kinds-of-coins 1) 1)
          ((= kinds-of-coins 2) 5)
          ((= kinds-of-coins 3) 10)
          ((= kinds-of-coins 4) 25)
          ((= kinds-of-coins 5) 50)))
  (cc amt 5))
#+END_SRC
** Exercise 1.11
#+BEGIN_SRC scheme
(define (f n)
  (if (< n 3)
      n
      (+ (* 1 (f (- n 1)))
         (* 2 (f (- n 2)))
         (* 3 (f (- n 3))))))
(define (f-iter n)
  (define (iterate a b c count)
    (if (= count 0)
        a
        (iterate b
                c
                (+ c
                   (* b 2)
                   (* a 3))
                (- count 1))))
  (iterate 0 1 2 n))
#+END_SRC
** Exercise 1.12
#+BEGIN_SRC scheme
(define (pascal n m)
  (if (or (= m 0)
          (= m n))
      1
      (+ (pascal (- n 1) (- m 1))
         (pascal (- n 1) m))))
#+END_SRC
** Exercise 1.16
If n even

b -> b2

n -> n/2 - 1

c -> cb2

If n odd

b -> b

n -> n - 1

c -> cb

Fibonacci numbers can be computed logarithmically too!
#+BEGIN_SRC scheme
(define (fast-expt base exp)
  (define (fast-iter b n c)
    (cond ((= n 0) c)
          ((even? n) (fast-iter (* b b) (- (/ n 2) 1) (* c (* b b))))
          (else (fast-iter b (- n 1) (* c b)))))
  (fast-iter base exp 1))
(define (even? n)
  (= (remainder n 2) 0))

;; And so here are all of the combinations of space-/time-complexity
;; we've seen so far:

(define (my-expt b n)
  (if (= n 0)
      1
      (* b (my-expt b (- n 1)))))

(define (my-expt-iter base pow)
  (define (iterate n c)
    (cond ((= n 0) c)
          (else (iterate (- n 1) (* base c)))))
  (iterate pow 1))

(define (my-expt-log base pow)
  (cond ((= pow 0) 1)
        ((even? pow) (square (my-expt-log base (/ pow 2))))
        (else (* base (my-expt-log base (- pow 1))))))

(define (my-expt-iter-log base pow)
  (define (iterate b p c)
    (cond ((= p 0) c)
          ((even? p) (iterate (* b b) (/ p 2) c))
          (else (iterate b (- p 1) (* b c)))))
  (iterate base pow 1))
#+END_SRC
** Exercise 1.17
#+BEGIN_SRC scheme
(define (halve b)
  (/ b 2))
(define (double b)
  (+ b b))
(define (mult a b)
  (cond ((= b 0) 0)
        ((even? b) (double (mult a (halve b))))
        (else (+ a (mult a (- b 1))))))
#+END_SRC
** Exercise 1.18
#+BEGIN_SRC scheme
(define (fast-mult x y)
  (define (fast-mult-iter a b c)
    (cond ((= b 0) c)
          ((even? b) (fast-mult-iter (double a) (- (halve b) 1) (+ c (double a))))
          (else (fast-mult-iter a (- b 1) (+ c a)))))
  (fast-mult-iter x y 0))
#+END_SRC
** Exercise 1.19
#+BEGIN_SRC scheme
(define (fib n)
  (define (fib-iter a b p q count)
    (cond ((= count 0) b)
          ((even? count)
           (fib-iter a
                     b
                     (+ (square p) (square q))
                     (+ (* 2 p q) (square q))
                     (/ count 2)))
          (else (fib-iter (+ (* b q) (* a q) (* a p))
                          (+ (* b p) (* a q))
                          p
                          q
                          (- count 1)))))
  (fib-iter 1 0 0 1 n))

(define (my-expmod base exp mod)
  "Generates an iterative process that runs in a logarithmic number of steps"
  (define (iterate b e i)
    (cond ((= e 0) i)
          ((even? e) (iterate (remainder (* b b) mod) (/ e 2) i))
          (else (iterate b (- e 1) (remainder (* b i) mod)))))
  (iterate base exp 1))
#+END_SRC
** Exercise 1.22
#+BEGIN_SRC scheme
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
(define (search-for-primes a b)
  (cond ((< a b) (timed-prime-test a)
                 (search-for-primes (+ a 1) b))))
(define (prime? n)
  (define (iterate i)
    (cond ((= (remainder n i) 0) #f)
          ((> (* i i) n) #t)
          (else (iterate (+ i 1)))))
  (iterate 2))
#+END_SRC
** Exercise 1.26
From a high level, calling expmod with (/ exp 2) halves the
problem. It is this halving, at each iteration of the process, that
allows it to run in a number of steps that is logarithmically
related to the size of the input. When Louis calls expmod twice,
each with a halved problem (the same half) he is doing twice of
half of the original amount of work. Therefore he is doing the
original amount of work, which in the case of computing an exponent
would be n multiplications where n is the power being raised to.
** Exercise 1.27
#+BEGIN_SRC scheme
(define (fermat-condition? a n)
  (= (my-expmod a n n) (remainder a n)))
(define (fermat-test? n)
  (define (satisfies? a)
    (cond ((>= a n) #t)
          ((fermat-condition? a n) (satisfies? (+ a 1)))
          (else #f)))
  (satisfies? 2))
(define (carmichael? n)
  (and (not (prime? n)) (fermat-test? n)))
#+END_SRC
** Exercise 1.29
#+BEGIN_SRC scheme
(define (simp f a b n)
  (define h (/ (- b a) n))
  (define (step x) (+ x h h))
  (define (cf c x) (* c (f x)))
  (define (2f x) (cf 2 x))
  (define (4f x) (cf 4 x))
  (* (/ h 3.0)
     (+ (f a)
        (sum 4f (+ a h) step b)
        (sum 2f (+ a h h) step b)
        (f b))))
#+END_SRC
** Exercise 1.30
#+BEGIN_SRC scheme
(define (sum term a next b)
  (define (iter a result)
     (if (> a b)
         result
         (iter (next a) (+ result (term a)))))
  (iter a 0))
#+END_SRC
** Exercise 1.31
#+BEGIN_SRC scheme
(define (product-iter term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* result (term a)))))
  (iter a 1))
(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b))))
#+END_SRC
** Exercise 1.32
#+BEGIN_SRC scheme
(define (accumulate combiner null-val term a next b)
  (if (> a b)
      null-val
      (combiner (term a)
                (accumulate combiner null-val term (next a) next b))))
(define (accumulate-iter combiner null-val term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner result (term a)))))
  (iter a null-val))
#+END_SRC
** Exercise 1.33
#+BEGIN_SRC scheme
(define (filtered-accumulate filter combiner null-val term a next b)
  (define (iter a result)
    (cond ((> a b) result)
          ((filter a) (iter (next a) (combiner result (term a))))
          (else (iter (next a) (combiner result null-val)))))
  (iter a null-val))
(define (sum-square-primes a b)
  (filtered-accumulate prime? + 0 square a inc b))
(define (product-coprimes n)
  (define (filt a)
    (= (gcd a n) 1))
  (filtered-accumulate filt * 1 (lambda (x) x) 2 inc n))
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (factorial b)
  (product (lambda (x) x) 2 (lambda (x) (+ x 1)) b))
#+END_SRC

Let is syntactic sugar for the underlying lambda application!

Iterative approximation of pi
#+BEGIN_SRC scheme
(define (4square x)
  (* 4 (square x)))
(define (4square1 x)
  (- (4square x) 1))
(define (inc x)
  (+ x 1))
(define (pi-approx n)
  (* 2.0 (/ (product-iter 4square 1 inc n)
            (product-iter 4square1 1 inc n))))
#+END_SRC
** Exercise 1.35
x^2 |-> x + 1

x^2 - x - 1 = 0

(-(-1) +- sqrt((-1)^2 - 4(-1)))/2

(1 +- sqrt(5))/2
** Exercise 1.36
#+BEGIN_SRC scheme
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (newline)
    (display guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
#+END_SRC
** Exercise 1.37
#+BEGIN_SRC scheme
(define (cont-frac n d k)
  (define (recurse i)
    (if (= i k)
        0
        (/ (n i)
           (+ (d i) (recurse (+ i 1))))))
  (recurse 1))
(define (cont-frac n d k)
  (define (iter i result)
    (if (= i 0)
        result
        (iter (- i 1) (/ (n i)
                         (+ (d i) result)))))
  (iter k 0))
#+END_SRC
** Exercise 1.38
#+BEGIN_SRC scheme
(define (e-approx k)
  (define (d k)
    (if (= (remainder k 3) 2)
        (+ 2.0 (* 2 (quotient k 3)))
        1.0))
  (+ 2 (cont-frac (lambda (x) 1.0) d k)))
#+END_SRC
** Exercise 1.39
#+BEGIN_SRC scheme
(define (tan-cf x k)
  (cont-frac (lambda (i) (if (= i 1)
                             x
                             (* -1.0 (square x))))
             (lambda (i) (- (* 2 i) 1.0))
             k))

#+END_SRC
** Exercise 1.40
#+BEGIN_SRC scheme
(define (cubic a b c)
  (lambda (x) (+ (cube x) (* a (square x)) (* b x) c)))

#+END_SRC
** Exercise 1.41
#+BEGIN_SRC scheme
(define (double f)
  (lambda (x) (f (f x))))
#+END_SRC
** Exercise 1.42
#+BEGIN_SRC scheme
(define (compose f g)
  (lambda (x) (f (g x))))

#+END_SRC
** Exercise 1.43
#+BEGIN_SRC scheme
(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))
(define (repeated-iter f n)
  (define (iter i g)
    (if (= i n)
        g
        (iter (+ i 1) (compose f g))))
  (iter 1 f))
(define (repeated-log f n)
  (cond ((= n 1) f)
        ((even? n) (repeated-log (compose f f) (/ n 2)))
        (else (compose f (repeated-log f (- n 1))))))

#+END_SRC
** Exercise 1.44
#+BEGIN_SRC scheme
(define (sum-list l)
  (if (null? l)
      0
      (+ (car l) (sum-list (cdr l)))))
(define (average-list l)
  (/ (sum-list l) (length l)))
(define (smooth f)
  (lambda (x) (average-list (list (f (- x dx))
                                  (f x)
                                  (f (+ x dx))))))
(define (n-fold-smoothed f n)
  ((repeated smooth n) f))

#+END_SRC
** Exercise 1.45
One average-damp works until fourth roots

Two average-damp's work until eighth roots

Three average-damp's work until sixteenth roots

I see a pattern...
#+BEGIN_SRC scheme
(define (average-damp f)
  (lambda (x) (average (list x (f x)))))
(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
               1.0))
(define (lb x)
  (/ (log x) (log 2)))
(define (nth-root k n)
  (fixed-point
   ((repeated average-damp (floor (lb n))) (lambda (x) (/ k (my-expt x (- n 1)))))
   1.0))
(define (difference a b)
  (abs (- a b)))
(define (test-nth-root base exp)
  (< (difference base
                 (nth-root (my-expt base exp)
                           exp))
     0.01))
#+END_SRC
** Exercise 1.46
#+BEGIN_SRC scheme
(define (iterative-improve good-enough? improve-guess)
  (lambda (guess)
    (define (iterate g)
      (if (good-enough? g)
          g
          (iterate (improve-guess g))))
    (iterate guess)))
(define (iterative-improve-sqrt x)
  ((iterative-improve (lambda (g) (< (difference (square g) x) 0.001))
                      (lambda (g) (average (list g (/ x g))))) 1.0))
(define (iterative-improve-fixed-point func first-guess)
  ((iterative-improve (lambda (g) (< (difference g (func g)) 0.00001))
                      func) first-guess))

#+END_SRC
The general technique of isolating the parts of a program that deal
with how data objects are represented from the parts of a program
that deal with how data objects are used is a powerful design
methodology called "data abstraction".
* Chapter 2
** Exercise 2.1
#+BEGIN_SRC scheme
(define (same-sign? a b)
  (> (* a b) 0))
(define (make-rat n d)
  (let ((g (gcd n d)))
    (cons (* (cond ((same-sign? n d) 1)
                   (else -1))
             (abs (/ n g)))
          (abs (/ d g)))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
 
#+END_SRC
** Exercise 2.2
#+BEGIN_SRC scheme
(define (make-point x y)
  (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (point-less p1 p2)
  (or (< (x-point p1) (x-point p2))
      (and (= (x-point p1) (x-point p2))
           (< (y-point p1) (y-point p2)))))
(define (point-equal p1 p2)
  (and (= (x-point p1) (x-point p2))
       (= (y-point p1) (y-point p2))))
(define (point-equal p1 p2)
  (and (not (point-less p1 p2))
       (not (point-less p2 p1))))
(define (make-segment start end)
  (cond ((point-less start end) (cons start end))
        (else (cons end start))))
(define (start-segment seg) (car seg))
(define (end-segment seg) (cdr seg))
(define (average a b)
  (/ (+ a b) 2))
(define (midpoint-segment seg)
  (make-point (average (x-point (start-segment seg))
                       (x-point (end-segment seg)))
              (average (y-point (start-segment seg))
                       (y-point (end-segment seg)))))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

#+END_SRC
** Exercise 2.3
#+BEGIN_SRC scheme
(define (make-rectangle corner1 corner2)
  (cond ((or (= (x-point corner1) (x-point corner2))
             (= (y-point corner1) (y-point corner2)))
         (error "Points define a segment"))
        ((point-less corner1 corner2) (cons corner1 corner2))
        (else (cons corner2 corner1))))
(define (height rect)
  (difference (y-point (car rect)) (y-point (cdr rect))))
(define (width rect)
  (difference (x-point (car rect)) (x-point (cdr rect))))
#+END_SRC
I won't get much more out of this by continuing...
** Exercise 2.4
#+BEGIN_SRC scheme
(define (my-cons x y)
  (lambda (m) (m x y)))
(define (my-car z)
  (z (lambda (p q) p)))
(define (my-cdr z)
  (z (lambda (p q) q)))
#+END_SRC
(my-cdr (my-cons 1 2))

((my-cons 1 2) (lambda (p q) q))

((lambda (m) (m 1 2)) (lambda (p q) q))

((lambda (p q) q) 1 2)

2
** Exercise 2.5
#+BEGIN_SRC scheme
(define (log-base base value)
  (/ (log value) (log base)))
(define (factor-out factor value)
  (if (= (remainder value factor) 0)
      (factor-out factor (/ value factor))
      value))
(define (my-cons x y)
  (* (my-expt 2 x) (my-expt 3 y)))
(define (my-car p)
  (log-base 2 (factor-out 3 p)))
(define (my-cdr p)
  (log-base 3 (factor-out 2 p)))

#+END_SRC
** Exercise 2.6
#+BEGIN_SRC scheme
(define zero (lambda (f) (lambda (x) x)))
(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
#+END_SRC
(add-1 zero)

(lambda (f) (lambda (x) (f ((zero f) x))))

(lambda (f) (lambda (x) (f (((lambda (q) (lambda (z) z)) f) x))))

(lambda (f) (lambda (x) (f ((lambda (z) z) x))))

(lambda (f) (lambda (x) (f x)))

(lambda (f) (lambda (x) (f x)))

(add-1 (lambda (f) (lambda (x) (f x))))

(lambda (f) (lambda (x) (f (((lambda (g) (lambda (x) (g x))) f) x))))

(lambda (f) (lambda (x) (f ((lambda (x) (f x)) x))))

(lambda (f) (lambda (x) (f (f x))))
#+BEGIN_SRC scheme
(define (plus a b)
  (lambda (f) (compose (a f) (b f))))
#+END_SRC
** Exercise 2.7
#+BEGIN_SRC scheme
(define (make-interval a b) (cons a b))
(define (lower-bound int)
  (min (car int) (cdr int)))
(define (upper-bound int)
  (max (car int) (cdr int)))
#+END_SRC
** Exercise 2.8
#+BEGIN_SRC scheme
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))

#+END_SRC
** Exercise 2.9
Let x = (a b) and y = (c d) be intervals. Then width(x) = (b-a)/2 and
width(y) = (d-c)/2. Well width(x+y) = width((a+c b+d)) = (b+d-a-c)/2 =
(b-a)/2 + (d-c)/2 = width(x)+width(y). And width(x-y) = width((a-d
b-c)) = (b-c-a+d)/2 = width(x) + width(y). Now let x1 = (1 2), x2 =
(3 4) and x3 = (5 6). Well width(x1) = width(x2) = width(x3) =
1/2. But width(x1*x2) = width((3 8)) = 5/2 and width(x2*x3) =
width(15 24) = 9/2. If product width were a function only of factor
widths then width(x1*x2) would equal width(x2*x3) (because width(x1) =
width(x2) = width(x3) = 1/2) but this is not the case. Similarly,
width(x1/x2) = width((1/4 2/3)) = 5/24 != width(x2/x3) = width((1/3
4/5)) = 7/30.
** Exercise 2.10
:LOGBOOK:
CLOCK: [2020-05-05 Tue 15:32]--[2020-05-05 Tue 16:00] =>  0:28
:END:
#+BEGIN_SRC scheme
(define (width-interval x)
  (/ (- (upper-bound x) (lower-bound x)) 2))
(define (mul-interval x y)
       (let ((p1 (* (lower-bound x) (lower-bound y)))
             (p2 (* (lower-bound x) (upper-bound y)))
             (p3 (* (upper-bound x) (lower-bound y)))
             (p4 (* (upper-bound x) (upper-bound y))))
         (make-interval (min p1 p2 p3 p4)
                        (max p1 p2 p3 p4))))
(define (div-interval x y)
  (if (= (width-interval y) 0)
      (error "Division by zero-width interval")
      (mul-interval x
      (make-interval (/ 1.0 (upper-bound y))
      (/ 1.0 (lower-bound y))))))
#+END_SRC
** Exercise 2.11
:LOGBOOK:
CLOCK: [2020-05-05 Tue 16:06]--[2020-05-05 Tue 17:35] =>  1:29
:END:
If we're multiplying intervals $i=(a,b)$ and $j=(x,y)$ then we must have $a \leq
b$ and $x \leq y$ and so we have the following cases:
#+ATTR_HTML: :border 2 :rules all :frame border
|                   | $a \leq b < 0$ | $a < 0 \leq b$            | $0 \leq a \leq b$ |
|-------------------+----------------+---------------------------+-------------------|
| $x \leq y < 0$    | $(by,ax)$      | $(bx,ax)$                 | $(bx,ay)$         |
| $x < 0 \leq y$    | $(ay,ax)$      | $(min(ay,bx),min(ax,by))$ | $(bx,by)$         |
| $0 \leq x \leq y$ | $(ay,bx)$      | $(ay,by)$                 | $(ax,by)$         |
For simplicity's sake, we notice that multiplication is commutative
and simplify our table:
#+ATTR_HTML: :border 2 :rules all :frame border
|                   | $a \leq b < 0$ | $a < 0 \leq b$            | $0 \leq a \leq b$ |
|-------------------+----------------+---------------------------+-------------------|
| $x \leq y < 0$    | $(by,ax)$      | $(bx,ax)$                 | $(bx,ay)$         |
| $x < 0 \leq y$    | $j*i$          | $(min(ay,bx),min(ax,by))$ | $(bx,by)$         |
| $0 \leq x \leq y$ | $j*i$          | $j*i$                     | $(ax,by)$         |
#+BEGIN_SRC scheme
  (define (mul-interval i j)
    (let ((a (lower-bound i))
          (b (upper-bound i))
          (x (lower-bound j))
          (y (upper-bound j)))
      (cond ((< b 0) (if (< y 0)
                         (make-interval (* b y) (* a x))
                         (mul-interval j i)))
            ((< a 0) (cond ((< y 0) (make-interval (* b x) (* a x)))
                           ((< x 0) (make-interval (min (* a y) (* b x))
                                                   (max (* a x) (* b y))))
                           (else (mul-interval j i))))
            (else (cond ((< y 0) (make-interval (* b x) (* a y)))
                        ((< x 0) (make-interval (* b x) (* b y)))
                        (else (make-interval (* a x) (* b y))))))))
#+END_SRC
** Exercise 2.12
#+BEGIN_SRC scheme
  (define (make-center-width c w)
    (make-interval (- c w) (+ c w)))
  (define (center i)
    (/ (+ (lower-bound i) (upper-bound i)) 2))
  (define (width i)
    (/ (- (upper-bound i) (lower-bound i)) 2))  
  (define (make-center-percent c p)
    (make-center-width c (* c p)))
  (define (percent i)
    (/ (width i) (center i)))
#+END_SRC
** Exercise 2.13
:LOGBOOK:
CLOCK: [2020-05-05 Tue 17:52]--[2020-05-05 Tue 18:28] =>  0:36
:END:
Let interval $i$ have center $c_{i}$ and tolerance $p_{i}$. Let
interval $j$ have center $c_{j}$ and tolerance $p_{j}$. Then $i =
(c_{i}-c_{i}p_{i},c_{i}+c_{i}p_{i})$ and $j =
(c_{j}-c_{j}p_{j},c_{j}+c_{j}p_{j})$. Suppose $c_{i} > 0$ and $c_{j} >
0$. Then $$i*j =
((c_{i}-c_{i}p_{i})*(c_{j}-c_{j}p_{j}),(c_{i}+c_{i}p_{i})*(c_{j}+c_{j}p_{j}))$$
$$= (c_{i}(1-p_{i})c_{j}(1-p_{j}),c_{i}(1+p_{i})c_{j}(1+p_{j}))$$ $$=
(c_{i}c_{j}(1-p_{i})(1-p_{j}),c_{i}c_{j}(1+p_{i})(1+p_{j}))$$ Supposing
small percentage tolerances: $$=
(c_{i}c_{j}(1-p_{i}-p_{j}),c_{i}c_{j}(1+p_{i}+p_{j}))$$ Therefore $i*j$
is an interval centered at $c_{i}c_{j}$ with tolerance
$p_{i}+p_{j}$.
** Exercise 2.14
:LOGBOOK:
CLOCK: [2020-05-05 Tue 18:33]--[2020-05-05 Tue 19:33] =>  1:00
:END:
#+BEGIN_SRC scheme
  (define (add-interval x y)
    (make-interval (+ (lower-bound x) (lower-bound y))
                   (+ (upper-bound x) (upper-bound y))))
  (define (par1 r1 r2)
    (div-interval (mul-interval r1 r2)
                  (add-interval r1 r2)))

    (define (par2 r1 r2)
      (let ((one (make-interval 1 1)))
        (div-interval one
                      (add-interval (div-interval one r1)
                                    (div-interval one r2)))))
#+END_SRC
Let $R_{1} = (a_{1},b_{1})$ and $R_{2} = (a_{2},b_{2})$. Expanding, we
see: $$\frac{R_{1}R_{2}}{R_{1}+R_{2}} =
(\frac{a_{1}a_{2}}{b_{1}+b_{2}},\frac{b_{1}b_{2}}{a_{1}+a_{2}})$$
$$\frac{1}{\frac{1}{R_{1}}+\frac{1}{R_{2}}} =
(\frac{a_{1}a_{2}}{a_{1}+a_{2}},\frac{b_{1}b_{2}}{b_{1}+b_{2}})$$ This
can be verified in the REPL.
** Exercise 2.17
:LOGBOOK:
CLOCK: [2020-05-06 Wed 00:41]--[2020-05-06 Wed 00:45] =>  0:04
:END:
#+BEGIN_SRC scheme
  (define (last-pair l)
    (if (null? (cdr l))
        l
        (last-pair (cdr l))))
#+END_SRC
** Exercise 2.18
:LOGBOOK:
CLOCK: [2020-05-06 Wed 01:07]--[2020-05-06 Wed 01:11] =>  0:04
CLOCK: [2020-05-06 Wed 00:46]--[2020-05-06 Wed 01:02] =>  0:16
:END:
#+BEGIN_SRC scheme
  (define (reverse l)
    (define (helper in out)
      (if (null? in)
          out
          (helper (cdr in) (cons (car in) out))))
    (helper l ()))
#+END_SRC
** Exercise 2.19
:LOGBOOK:
CLOCK: [2020-05-06 Wed 01:12]--[2020-05-06 Wed 01:27] =>  0:15
:END:
#+BEGIN_SRC scheme
  (define no-more? null?)
  (define except-first-denomination cdr)
  (define first-denomination car)
  (define (cc amount coin-values)
    (cond ((= amount 0) 1)
          ((or (< amount 0) (no-more? coin-values)) 0)
          (else
           (+ (cc amount
                  (except-first-denomination coin-values))
              (cc (- amount
                     (first-denomination coin-values))
                  coin-values)))))
#+END_SRC
The order of the list coin-values still does not affect the
output because the procedure does not rely on any assumptions
regarding the order of coin-values.
** Exercise 2.20
:LOGBOOK:
CLOCK: [2020-05-06 Wed 13:07]--[2020-05-06 Wed 13:29] =>  0:22
CLOCK: [2020-05-06 Wed 01:30]--[2020-05-06 Wed 01:32] =>  0:02
:END:
#+BEGIN_SRC scheme
  (define (same-parity? a b)
    (= (remainder a 2) (remainder b 2)))
  (define (same-parity x . l)
    (define (filterer sublist)
      (cond ((null? sublist) sublist)
            ((same-parity? x (car sublist))
             (cons (car sublist) (filterer (cdr sublist))))
            (else (filterer (cdr sublist)))))
    (cons x (filterer l)))
#+END_SRC
** Exercise 2.21
#+BEGIN_SRC scheme
    (define (square-list items)
      (if (null? items)
          items
          (cons (square (car items))
                (square-list (cdr items)))))
    (define (square-list-map items)
      (map square items))
#+END_SRC
** Exercise 2.22
:LOGBOOK:
CLOCK: [2020-05-06 Wed 13:47]--[2020-05-06 Wed 13:49] =>  0:02
:END:
Elements appearing first in the input list will be added to the head
of the ouput list before elements appearing later. Therefore, elements
appearing first in the input will appear later in the output.

Now, the output isn't a list.
** Exercise 2.23
:LOGBOOK:
CLOCK: [2020-05-06 Wed 13:50]--[2020-05-06 Wed 14:18] =>  0:28
:END:
#+BEGIN_SRC scheme
    (define (for-each f l)
      (if (not (null? l))
          (begin (f (car l))
                 (for-each f (cdr l)))))
#+END_SRC
Note that "nil" is no longer a part of the Scheme standard. See this
[[https://stackoverflow.com/questions/9115703/null-value-in-mit-scheme][stackoverflow post]] for more.
** Exercise 2.25
#+BEGIN_SRC scheme
  (define l1 (list 1 3 (list 5 7) 9))
  (car (cdr (car (cdr (cdr l1)))))
  (define l2 (list (list 7)))
  (car (car l2))
  (define l3 (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))
  (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr l3))))))))))))
#+END_SRC
** Exercise 2.27
#+BEGIN_SRC scheme
  (define (deep-reverse l)
    (define (helper in out)
      (if (null? in)
          out
          (helper (cdr in) (cons (deep-reverse (car in)) out))))
    (if (list? l)
        (helper l ())
        l))
#+END_SRC
** Exercise 2.28
#+BEGIN_SRC scheme
  (define (fringe tree)
    (cond ((not (list? tree)) (list tree))
          ((not (pair? tree)) tree)
          (else (append (fringe (car tree)) (fringe (cdr tree))))))
#+END_SRC
** Exercise 2.29
#+BEGIN_SRC scheme
  (define (left-branch m) (car m))
  (define (right-branch m) (car (cdr m)))
  (define (branch-length b) (car b))
  (define (branch-structure b) (car (cdr b)))
  (define (mobile? structure) (pair? structure))
  (define (branch-weight b)
    (let ((structure (branch-structure b)))
      (if (mobile? structure)
          (total-weight structure)
          structure)))   
  (define (total-weight m)
    (+ (branch-weight (left-branch m))
       (branch-weight (right-branch m))))
  (define (mobile-balanced? m)
    (define (branch-balanced? b)
      (let ((structure (branch-structure b)))
        (if (mobile? structure)
            (mobile-balanced? structure)
            #t)))
    (let ((left (left-branch m))
          (right (right-branch m)))
      (and (= (* (branch-length left) (branch-weight left))
              (* (branch-length right) (branch-weight right)))
           (branch-balanced? left)
           (branch-balanced? right))))
#+END_SRC
** Exercise 2.30
#+BEGIN_SRC scheme
  (define (square-tree tree)
    (cond ((null? tree) tree)
          ((not (pair? tree)) (square tree))
          (else (cons (square-tree (car tree))
                      (square-tree (cdr tree))))))
  (define (square-tree-map tree)
    (map (lambda (subtree)
           (if (not (pair? subtree))
               (square subtree)
               (square-tree-map subtree)))
         tree))
#+END_SRC
** Exercise 2.31
#+BEGIN_SRC scheme
  (define (tree-map f t)
    (cond ((null? t) t)
          ((not (pair? t)) (f t))
          (else (cons (tree-map f (car t))
                      (tree-map f (cdr t))))))
#+END_SRC
** Exercise 2.32
The procedure takes advantage of the following observation. If $x$ is
an element of set $S$ then we can partition the subsets of $S$ into
two categories: those that contain $x$ and those that do not. All of
the subsets that do not contain $x$ can be found by recursively
finding all of the subsets of $S \setminus {x}$. All of the subsets
that do contain $x$ are of the form $x \cup U$ where $U \in \wp (S
\setminus {x})$.
#+BEGIN_SRC scheme
  (define (subsets s)
    (if (null? s)
        (list ())
        (let ((rest (subsets (cdr s))))
          (append rest (map (lambda (l) (cons (car s) l)) rest)))))
#+END_SRC
** Exercise 2.33
#+BEGIN_SRC scheme
  (define (accumulate op initial sequence)
    (if (null? sequence)
        initial
        (op (car sequence)
            (accumulate op initial (cdr sequence)))))
  (define (map p sequence)
    (accumulate (lambda (x y) (cons (p x) y)) () sequence))
  (define (append seq1 seq2)
    (accumulate cons seq2 seq1))
  (define (length sequence)
    (accumulate (lambda (x y) (+ 1 y)) 0 sequence))
#+END_SRC
** Exercise 2.34
#+BEGIN_SRC scheme
  (define (horner-eval x coefficient-sequence)
    (accumulate (lambda (this-coeff higher-terms)
                  (+ (* higher-terms x)
                     this-coeff))
                0
                coefficient-sequence))
#+END_SRC
** Exercise 2.35
#+BEGIN_SRC scheme
  (define (count-leaves t)
    (accumulate +
                0
                (map (lambda (elt)
                       (if (pair? elt)
                           (count-leaves elt)
                           1))
                     t)))
#+END_SRC
** Exercise 2.36
#+BEGIN_SRC scheme
  (define (accumulate-n op init seqs)
    (if (null? (car seqs))
        ()
        (cons (accumulate op init (map car seqs))
              (accumulate-n op init (map cdr seqs)))))
#+END_SRC
** Exercise 2.37
#+BEGIN_SRC scheme
  (define (dot-product v w)
    (accumulate + 0 (map * v w)))
  (define (matrix-*-vector m v)
    (map (lambda (row)
           (dot-product row v))
         m))
  (define (transpose mat)
    (accumulate-n cons () mat))
  (define (matrix-*-matrix m n)
    (let ((cols (transpose n)))
      (map (lambda (row)
             (map (lambda (col)
                    (dot-product row col))
                  cols))
           m)))
#+END_SRC
** Exercise 2.38
#+BEGIN_SRC scheme
  (define (fold-left op initial sequence)
    (define (iter result rest)
      (if (null? rest)
          result
          (iter (op result (car rest))
                (cdr rest))))
    (iter initial sequence))
  (define fold-right accumulate)

  (fold-right / 1 (list 1 2 3)) ; 3/2
  (fold-left / 1 (list 1 2 3)) ; 1/6
  (fold-right list () (list 1 2 3)) ; (1 (2 (3 ())))
  (fold-left list () (list 1 2 3)) ; (((() 1) 2) 3)
#+END_SRC
** Exercise 2.39
#+BEGIN_SRC scheme
  (define (reverse sequence)
    (fold-right (lambda (x y) (append y (list x))) () sequence))
  (define (reverse sequence)
    (fold-left (lambda (x y) (cons y x)) () sequence))
#+END_SRC
** Exercise 2.40
#+BEGIN_SRC scheme
  (define (enumerate-interval k)
    (define (iter curr result)
      (if (= curr 0)
          result
          (iter (- curr 1) (cons curr result))))
    (iter k ()))
  (define (unique-pairs n)
    (flatmap (lambda (i)
               (map (lambda (j)
                      (list i j))
                    (enumerate-interval (- i 1))))
             (enumerate-interval n)))
#+END_SRC
** Exercise 2.41
#+BEGIN_SRC scheme
  ;; This is slow...
  (define (unique-tuples n max)
    (cond ((= n 0) (list ()))
          ((< max n) ())
          ((= max n) (list (reverse (enumerate-interval n))))
          (else (append (unique-tuples n (- max 1))
                        (map (lambda (t)
                               (cons max t))
                             (unique-tuples (- n 1) (- max 1)))))))
  ;; (define (unique-tuples n max)
  ;;   (define (iter tuples)
  ;;     (if (= (length (car tuples)) 0)
  ;;         tuples
  ;;         (iter (flatmap (lambda (l)
  ;;                          (if))))))
  ;;   (if (< max n)
  ;;       ()
  ;;       (flatmap values
  ;;                (iter (map list
  ;;                           (reverse (enumerate-interval n)))))))
  ;; ;; And this doesn't work...
  ;; (define (unique-tuples n max)
  ;;   (define (next-tuple tuple)
  ;;     (define (cons-next-tuple min t)
  ;;       (cond ((null? t) t)
  ;;             ((null? (cdr t)) t)
  ;;             ((= (car t) (- (cadr t) 1))
  ;;              (cons min (cons-next-tuple (+ min 1) (cdr t))))
  ;;             (else (cons (+ 1 (car t)) (cdr t)))))
  ;;     (cons-next-tuple 1 tuple))
  ;;   (define (iter t result)
  ;;     (if (> (car t) max)
  ;;         result
  ;;         (iter (next-tuple t) (cons t result))))
  ;;   (iter (enumerate-interval n) ()))
  (define (sum-list l)
    (fold-left + 0 l))
  (define (bounded-partition n parts bound)
    (filter (lambda (t)
              (= n (sum-list t)))
            (unique-tuples parts bound)))
  (define (bounded-paritition-3 total bound)
    (bounded-partition total 3 bound))
#+END_SRC
** Exercise 2.42
#+BEGIN_SRC scheme
    (define (make-queen row col)
      (list row col))
    (define (get-row queen)
      (car queen))
    (define (get-col queen)
      (cadr queen))
    (define (queens board-size)
      (define (adjoin-position row col board)
        (cons (make-queen row col) board))
      (define (safe? col board)
        (define (same-diag? q1 q2)
          (= (difference (get-row q1) (get-row q2))
             (difference (get-col q1) (get-col q2))))
        (define (same-row? q1 q2)
          (= (get-row q1) (get-row q2)))
        (let ((new-queen (car board)))
          (fold-right (lambda (x y) (and x y))
                      #t
                      (map (lambda (q)
                             (and (not (same-row? new-queen q))
                                  (not (same-diag? new-queen q))))
                           (cdr board)))))
      (define empty-board ())
      (define (queen-cols k)
        (if (= k 0)
            (list empty-board)
            (filter
             (lambda (positions) (safe? k positions))
             (flatmap
              (lambda (rest-of-queens)
                (map (lambda (new-row)
                       (adjoin-position new-row k rest-of-queens))
                     (enumerate-interval board-size)))
              (queen-cols (- k 1))))))
      (queen-cols board-size))
    (define (repeat-display n str)
      (if (> n 0)
          (begin
            (display str)
            (whitespace (- n 1)))))
    (define (print-queens board)
      (define (iter left)
        (if (not (null? left))
            (let ((row (get-row (car left))))
              (repeat-display (- row 1) ".")
              (display "Q")
              (repeat-display (- (length board) row) ".")
              (newline)
              (iter (cdr left)))))
      (iter board))
    (define (show-queens n)
      (map (lambda (soln)
             (print-queens soln)
             (newline))
           (queens n)))
#+END_SRC
** Exercise 2.43
In the provided ~queens~ procedure, the $n \times (k-1)$ subproblem is
solved once. Then, for each solution of the subproblem, several
candidate solutions for the $n \times k$ problem are created by adding
a new column with a queen in each possible row.

Louis's procedure calculates each possible row once (in the call to
~enumerate-interval~). Then, for each row, the procedure calculates
the $n \times (k-1)$ subproblem. So, at each level of the process, the
subproblem is solved $n$ times. Therefore, in Louis' procedure, the
base-case $n \times 0$ problem, computed by ~(queens 0)~, is
calculated $n^{n}$ times. Louis' procedure solves the puzzle in
approximately time $n^{n}T$.
