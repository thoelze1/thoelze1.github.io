#+TITLE: How I Blog

Using `org-publish` to generate my website offers a false distinction
between data and code. On the one hand, there is a clear boundary
between the publishing instructions that live in `init.el` and the
website data within the `org` directory. But on the other hand, the
details of the build instructions clearly depend on the structure of
the `org` directory.

The problem with org-publish. Consider the following:

#+begin_src elisp
(setq org-publish-project-alist
      '(("test-blog"
         :base-directory "~/publish/blog-posts"
         :publishing-directory "~/publish"
         :publishing-function org-html-publish-to-html)
        ("test-other"
         :base-directory "~/git/publish/other"
         :publishing-directory "~/git/publish"
         :publishing-function org-html-publish-to-html)
        ("test" :components ("test-blog" "test-other"))))
#+end_src

The links get broken. So on the one hand, `org-publish` offers a way
to break up a large project into subprojects. But it doesn't
immediately tell you that a large project may be broken up if and only
if its links take certain assumptions to account (yes, it would
probably be pretty easy to surmise this feature). So ideally, I would
have just one org-publish project. However, some need different
publishing-functions, e.g. my resume, so I'll have at least 2 functions

* Org-mode sitemap bug
https://emacs.stackexchange.com/questions/44534/org-mode-sitemap-not-updated-after-re-publish

* File-specific ~org-export~ variables
See https://emacs.stackexchange.com/questions/47474/setting-variable-for-org-mode-html-export
* Emacs
* Org mode
* Github pages
* Optional
** Domain name
** Twitter bootstrap
* Examples
** https://miikanissi.com/blog/website-with-emacs.html
** https://rkallos.com/blog/2017/01/02/static-site-generation-with-org-mode/
** https://opensource.com/article/20/3/blog-emacs

